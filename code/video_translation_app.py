import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import threading
import os
import json
from pathlib import Path
import sys
from datetime import datetime
import webbrowser
import re
import time
import psutil
from dotenv import load_dotenv

class VideoTranslationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Video Translation Studio v1")
        self.root.geometry("1200x800")
        
        # Zwiƒôkszenie domy≈õlnych czcionek
        self.root.option_add('*TLabel*Font', ('Arial', 11))
        self.root.option_add('*TButton*Font', ('Arial', 12))
        self.root.option_add('*TLabelFrame*Font', ('Arial', 14, 'bold'))
        self.root.option_add('*TNotebook*Tab*Font', ('Arial', 12))
        
        # Wczytaj zmienne ≈õrodowiskowe z .env
        load_dotenv()
        
        # Konfiguracja
        self.config_file = "video_translation_config.json"
        self.load_config()
        
        # Zmienne
        self.working_dir = tk.StringVar(value=self.config.get('working_dir', ''))
        self.youtube_url = tk.StringVar()
        self.video_path = tk.StringVar()
        self.current_step = tk.StringVar(value="Gotowy do rozpoczƒôcia")
        
        # Zmienne dla kluczy API
        self.openai_api_key = tk.StringVar(value=os.getenv('OPENAI_API_KEY', ''))
        self.elevenlabs_api_key = tk.StringVar(value=os.getenv('ELEVENLABS_API_KEY', ''))
        
        # Zmienne do ≈õledzenia ostatnio pobranych plik√≥w
        self.last_downloaded_video = None
        self.last_transcription_file = None
        
        # Lista aktywnych wƒÖtk√≥w
        self.active_threads = []
        
        # Zmienne do postƒôpu
        self.current_process = None
        self.progress_vars = {}
        self.progress_labels = {}
        self.progress_bars = {}
        self.stop_flags = {}
        
        # Zmienne dla checkbox√≥w KOMBO (domy≈õlnie wszystkie zaznaczone)
        self.combo_steps_enabled = {
            'translate': tk.BooleanVar(value=True),
            'generate': tk.BooleanVar(value=True), 
            'overlay': tk.BooleanVar(value=True),
            'delete_sm': tk.BooleanVar(value=True),
            'white_logo': tk.BooleanVar(value=True),
            'detect_polish': tk.BooleanVar(value=True),
            'intro_outro': tk.BooleanVar(value=True),
            'social_media': tk.BooleanVar(value=True)
        }
        
        # Zmienne dla intro/outro (u≈ºywane w kombo)
        self.intro_video_path = tk.StringVar()
        self.outro_video_path = tk.StringVar()
        self.main_video_path = tk.StringVar()
        
        # Zmienne dla dodatkowych funkcji
        self.gap_numbers = tk.StringVar()
        
        # Obs≈Çuga zamkniƒôcia aplikacji
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        self.setup_ui()
        
    def load_config(self):
        """≈Åaduje konfiguracjƒô z pliku"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
            else:
                self.config = {
                    'working_dir': '',
                    'api_keys': {},
                    'last_used_files': {}
                }
        except Exception as e:
            print(f"B≈ÇƒÖd ≈Çadowania konfiguracji: {e}")
            self.config = {
                'working_dir': '',
                'api_keys': {},
                'last_used_files': {}
            }
    
    def save_config(self):
        """Zapisuje konfiguracjƒô do pliku"""
        try:
            self.config['working_dir'] = self.working_dir.get()
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"B≈ÇƒÖd zapisywania konfiguracji: {e}")
    
    def save_api_keys(self):
        """Zapisuje klucze API do pliku .env"""
        try:
            env_content = f"""# Video Translation Studio - Environment Variables
# This file contains API keys and should NOT be committed to Git

# OpenAI API Key (required for transcription and translation)
OPENAI_API_KEY={self.openai_api_key.get()}

# ElevenLabs API Key (optional, for voice generation)
ELEVENLABS_API_KEY={self.elevenlabs_api_key.get()}
"""
            
            # Spr√≥buj r√≥≈ºne lokalizacje dla pliku .env (szczeg√≥lnie wa≈ºne na macOS)
            env_locations = [
                '.env',  # Bie≈ºƒÖcy katalog
                os.path.expanduser('~/.env'),  # Katalog domowy u≈ºytkownika
                os.path.join(os.path.expanduser('~'), 'Documents', '.env'),  # Dokumenty
                os.path.join(os.path.expanduser('~'), 'Desktop', '.env')  # Pulpit
            ]
            
            saved = False
            saved_location = None
            
            for env_path in env_locations:
                try:
                    # Upewnij siƒô, ≈ºe katalog istnieje
                    dir_path = os.path.dirname(os.path.abspath(env_path))
                    if dir_path:  # Je≈õli ≈õcie≈ºka zawiera katalog
                        os.makedirs(dir_path, exist_ok=True)
                    
                    with open(env_path, 'w', encoding='utf-8') as f:
                        f.write(env_content)
                    
                    saved = True
                    saved_location = env_path
                    break
                    
                except (PermissionError, OSError):
                    continue
            
            # Ustaw zmienne ≈õrodowiskowe (zawsze)
            os.environ['OPENAI_API_KEY'] = self.openai_api_key.get()
            os.environ['ELEVENLABS_API_KEY'] = self.elevenlabs_api_key.get()
            
            if saved:
                self.log(f"‚úÖ Klucze API zosta≈Çy zapisane do: {saved_location}")
                messagebox.showinfo("Sukces", f"Klucze API zosta≈Çy zapisane pomy≈õlnie!\nLokalizacja: {saved_location}")
            else:
                self.log("‚ö†Ô∏è Nie uda≈Ço siƒô zapisaƒá pliku .env, ale klucze zosta≈Çy ustawione tymczasowo")
                messagebox.showwarning("Ostrze≈ºenie", 
                    "Nie uda≈Ço siƒô zapisaƒá pliku .env (brak uprawnie≈Ñ).\n"
                    "Klucze zosta≈Çy ustawione tymczasowo - bƒôdziesz musia≈Ç je wprowadziƒá ponownie po restarcie.\n\n"
                    "RozwiƒÖzanie: Przenie≈õ aplikacjƒô do folderu Dokumenty lub Pulpit.")
            
        except Exception as e:
            error_msg = f"B≈ÇƒÖd zapisywania kluczy API: {e}"
            self.log(f"‚ùå {error_msg}")
            messagebox.showerror("B≈ÇƒÖd", error_msg)
    
    def setup_ui(self):
        """Konfiguruje interfejs u≈ºytkownika z nowoczesnym wyglƒÖdem"""
        # Ustaw nowoczesny styl
        self.setup_modern_style()
        
        # G≈Ç√≥wny kontener
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Konfiguracja grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Nag≈Ç√≥wek z nowoczesnym designem
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        title_label = ttk.Label(header_frame, text="üé¨ Video Translation Studio", 
                               font=('Segoe UI', 24, 'bold'), foreground='#2c3e50')
        title_label.pack()
        
        # Status z nowoczesnym stylem
        status_label = ttk.Label(header_frame, textvariable=self.current_step, 
                                font=('Segoe UI', 11), foreground='#7f8c8d')
        status_label.pack(pady=(5, 0))
        
        # Panel wyboru folderu z nowoczesnym stylem
        folder_frame = ttk.LabelFrame(main_frame, text="üìÅ Folder roboczy (folder g≈Ç√≥wny procesowanego wideo)", padding="12")
        folder_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        ttk.Label(folder_frame, text="Folder roboczy:", font=('Segoe UI', 10)).grid(row=0, column=0, sticky=tk.W)
        folder_entry = ttk.Entry(folder_frame, textvariable=self.working_dir, width=50, font=('Segoe UI', 10))
        folder_entry.grid(row=0, column=1, padx=(10, 10))
        select_btn = ttk.Button(folder_frame, text="üìÇ Wybierz", command=self.select_working_dir, style='Accent.TButton')
        select_btn.grid(row=0, column=2)
        
        # Notebook (zak≈Çadki) z nowoczesnym stylem
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 15))
        
        # Zak≈Çadka 1: Konfiguracja API
        self.api_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.api_tab, text="üîë Konfiguracja API")
        self.setup_api_tab()
        
        # Zak≈Çadka 2: Krok 1
        self.step1_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.step1_tab, text="üéØ Krok 1")
        self.setup_step1_tab()
        
        # Zak≈Çadka 3: KOMBO
        self.combo_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.combo_tab, text="‚ö° KOMBO")
        self.setup_combo_tab()
        
        # Zak≈Çadka 4: Dodatkowe funkcje
        self.extra_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.extra_tab, text="üîß Dodatkowe funkcje")
        self.setup_extra_tab()
        
        # Zak≈Çadka 5: Logi
        self.logs_tab = ttk.Frame(self.notebook, padding="15")
        self.notebook.add(self.logs_tab, text="üìã Logi")
        self.setup_logs_tab()
        
        # Konfiguracja grid
        main_frame.rowconfigure(2, weight=1)
        
        # Wczytaj intro/outro po utworzeniu wszystkich widget√≥w
        self.load_intro_outro_files()
        
    def setup_modern_style(self):
        """Ustawia nowoczesny styl aplikacji"""
        try:
            # Pr√≥buj u≈ºyƒá nowoczesnego stylu
            style = ttk.Style()
            
            # Ustaw nowoczesny motyw
            available_themes = style.theme_names()
            if 'clam' in available_themes:
                style.theme_use('clam')
            elif 'vista' in available_themes:
                style.theme_use('vista')
            
            # Konfiguruj kolory i style
            style.configure('TLabel', font=('Segoe UI', 10))
            style.configure('TButton', font=('Segoe UI', 10), padding=6)
            style.configure('TEntry', font=('Segoe UI', 10), padding=4)
            style.configure('TNotebook', font=('Segoe UI', 10))
            style.configure('TNotebook.Tab', font=('Segoe UI', 10), padding=[12, 6])
            style.configure('TLabelframe', font=('Segoe UI', 10, 'bold'))
            style.configure('TLabelframe.Label', font=('Segoe UI', 10, 'bold'))
            
            # Styl dla przycisk√≥w akcji
            style.configure('Accent.TButton', 
                          background='#3498db', 
                          foreground='white',
                          font=('Segoe UI', 10, 'bold'))
            
            # Styl dla czerwonego przycisku
            style.configure('Red.TButton', 
                          background='#e74c3c', 
                          foreground='white',
                          font=('Segoe UI', 10, 'bold'))
            
            # Styl dla checkbox√≥w
            style.configure('TCheckbutton', font=('Segoe UI', 10))
            
        except Exception as e:
            print(f"Nie uda≈Ço siƒô ustawiƒá nowoczesnego stylu: {e}")
        
    def setup_api_tab(self):
        """Konfiguruje zak≈Çadkƒô Konfiguracja API"""
        # OpenAI API Key
        ttk.Label(self.api_tab, text="OpenAI API Key:", font=('Segoe UI', 11, 'bold')).grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        openai_entry = ttk.Entry(self.api_tab, textvariable=self.openai_api_key, width=70, show="*", font=('Segoe UI', 10))
        openai_entry.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        # ElevenLabs API Key
        ttk.Label(self.api_tab, text="ElevenLabs API Key:", font=('Segoe UI', 11, 'bold')).grid(row=2, column=0, sticky=tk.W, pady=(0, 5))
        elevenlabs_entry = ttk.Entry(self.api_tab, textvariable=self.elevenlabs_api_key, width=70, show="*", font=('Segoe UI', 10))
        elevenlabs_entry.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # Przycisk zapisz klucze
        save_keys_btn = ttk.Button(self.api_tab, text="üíæ Zapisz klucze", command=self.save_api_keys, style='Accent.TButton')
        save_keys_btn.grid(row=4, column=0, columnspan=2, pady=(0, 10))
        
        # Informacja
        info_text = "üí° Wprowad≈∫ swoje klucze API i kliknij 'Zapisz klucze'. Klucze zostanƒÖ zapisane lokalnie i bƒôdƒÖ automatycznie ≈Çadowane przy nastƒôpnym uruchomieniu."
        info_label = ttk.Label(self.api_tab, text=info_text, wraplength=600, justify=tk.LEFT, 
                              font=('Segoe UI', 9), foreground='#7f8c8d')
        info_label.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        # Konfiguracja grid
        self.api_tab.columnconfigure(0, weight=1)
        
    def setup_combo_tab(self):
        """Konfiguruje zak≈Çadkƒô KOMBO"""
        # Checkboxy krok√≥w
        steps_frame = ttk.LabelFrame(self.combo_tab, text="üìã Wybierz kroki do wykonania", padding="15")
        steps_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Grid dla checkbox√≥w (2 kolumny)
        steps_frame.columnconfigure(0, weight=1)
        steps_frame.columnconfigure(1, weight=1)
        
        step_descriptions = {
            'translate': "1. üåê T≈Çumaczenie na angielski",
            'generate': "2. üéµ Generowanie audio",
            'overlay': "3. üé¨ Nak≈Çadanie audio na wideo (STABILNIE)",
            'delete_sm': "4. üîá Usuwanie ciszy i bezruchu (STABILNIE)",
            'white_logo': "5. üñºÔ∏è Usu≈Ñ bia≈ÇƒÖ stopkƒô i dodaj logo",
            'detect_polish': "6. üîç Wykrywanie polskiego tekstu",
            'intro_outro': "7. üé¨ Dodawanie intro i outro (SZYBKO)",
            'social_media': "8. üì± Generowanie posta social media"
        }
        
        row = 0
        col = 0
        for step_key, description in step_descriptions.items():
            cb = ttk.Checkbutton(steps_frame, text=description, variable=self.combo_steps_enabled[step_key])
            cb.grid(row=row, column=col, sticky=tk.W, padx=(0, 20), pady=2)
            
            if col == 0:
                col = 1
            else:
                col = 0
                row += 1
        
        # Przyciski kontrolne
        buttons_frame = ttk.Frame(self.combo_tab)
        buttons_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Button(buttons_frame, text="‚úÖ Zaznacz wszystkie", 
                  command=self.select_all_combo_steps, style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame, text="‚ùå Odznacz wszystkie", 
                  command=self.deselect_all_combo_steps).pack(side=tk.LEFT, padx=(0, 20))
        
        # Przyciski uruchom/stop
        run_btn = ttk.Button(buttons_frame, text="üöÄ Uruchom KOMBO", 
                           command=self.run_combo_workflow, style='Accent.TButton')
        run_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        stop_btn = ttk.Button(buttons_frame, text="‚èπÔ∏è STOP", 
                             command=lambda: self.stop_operation('combo'), style='Red.TButton')
        stop_btn.pack(side=tk.RIGHT)
        
        # Postƒôp
        self.progress_vars['combo'] = tk.DoubleVar()
        self.progress_labels['combo'] = tk.StringVar(value="Gotowy do uruchomienia")
        
        progress_frame = ttk.LabelFrame(self.combo_tab, text="üìä Postƒôp", padding="10")
        progress_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.progress_bars['combo'] = ttk.Progressbar(progress_frame, variable=self.progress_vars['combo'], 
                                                    maximum=100, length=400)
        self.progress_bars['combo'].pack(fill=tk.X, pady=(0, 5))
        
        ttk.Label(progress_frame, textvariable=self.progress_labels['combo'], 
                font=('Segoe UI', 9)).pack(anchor=tk.W)
        
    def setup_step1_tab(self):
        """Konfiguruje zak≈Çadkƒô Krok 1"""
        # Opis
        desc_text = """üéØ Krok 1: Pobieranie i transkrypcja. Aplikacja pobierze wideo z YouTube (ew. wska≈º plik na dysku), wykona transkrypcjƒô polskiego tekstu do pliku z odpowiedniƒÖ strukturƒÖ sentencji, kt√≥ry nastƒôpnie nale≈ºy przejrzeƒá i ewentualnie poprawiƒá."""
        ttk.Label(self.step1_tab, text=desc_text, wraplength=700, justify=tk.LEFT, 
                font=('Segoe UI', 10), foreground='#2c3e50').pack(anchor=tk.W, pady=(0, 20))
        
        # Input frame
        input_frame = ttk.LabelFrame(self.step1_tab, text="üìπ ≈πr√≥d≈Ço wideo", padding="15")
        input_frame.pack(fill=tk.X, pady=(0, 20))
        
        # YouTube URL
        youtube_frame = ttk.Frame(input_frame)
        youtube_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(youtube_frame, text="YouTube URL:", font=('Segoe UI', 10, 'bold')).pack(anchor=tk.W)
        ttk.Entry(youtube_frame, textvariable=self.youtube_url, width=60, font=('Segoe UI', 10)).pack(anchor=tk.W, pady=(5, 0))
        ttk.Button(youtube_frame, text="üì• Pobierz z YouTube i transkrybuj", 
                  command=lambda: self.run_step1("youtube"), style='Red.TButton').pack(anchor=tk.W, pady=(10, 0))
        
        # Separator
        separator1 = ttk.Separator(input_frame, orient='horizontal')
        separator1.pack(fill=tk.X, pady=15)
        
        # Plik wideo
        file_frame = ttk.Frame(input_frame)
        file_frame.pack(fill=tk.X)
        
        ttk.Label(file_frame, text="Plik wideo:", font=('Segoe UI', 10, 'bold')).pack(anchor=tk.W)
        file_select_frame = ttk.Frame(file_frame)
        file_select_frame.pack(fill=tk.X, pady=(5, 0))
        
        ttk.Entry(file_select_frame, textvariable=self.video_path, width=50, font=('Segoe UI', 10)).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(file_select_frame, text="üìÇ Wybierz plik", 
                  command=self.select_video_file).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(file_select_frame, text="üé¨ Transkrybuj plik", 
                  command=lambda: self.run_step1("file"), style='Accent.TButton').pack(side=tk.LEFT)
        
    def setup_extra_tab(self):
        """Konfiguruje zak≈Çadkƒô Dodatkowe funkcje"""
        # Cofnij usuniƒôcie luki
        gap_frame = ttk.LabelFrame(self.extra_tab, text="üîÑ Cofnij usuniƒôcie luki", padding="15")
        gap_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(gap_frame, text="Wprowad≈∫ numer lub numery luk:", font=('Segoe UI', 10)).pack(anchor=tk.W)
        ttk.Entry(gap_frame, textvariable=self.gap_numbers, width=30, font=('Segoe UI', 10)).pack(anchor=tk.W, pady=5)
        ttk.Button(gap_frame, text="‚Ü©Ô∏è Cofnij usuniƒôcie", 
                  command=self.revert_gap_removal, style='Accent.TButton').pack(anchor=tk.W, pady=5)
        
    def setup_logs_tab(self):
        """Konfiguruje zak≈Çadkƒô Logi"""
        # Logi z nowoczesnym stylem
        log_frame = ttk.LabelFrame(self.logs_tab, text="üìã Logi operacji", padding="12")
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=20, width=80, 
                                                font=('Consolas', 9), 
                                                bg='#f8f9fa', fg='#2c3e50',
                                                insertbackground='#3498db')
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Przycisk czyszczenia log√≥w
        clear_btn = ttk.Button(self.logs_tab, text="üóëÔ∏è Wyczy≈õƒá logi", 
                              command=self.clear_logs, style='Accent.TButton')
        clear_btn.pack(anchor=tk.W, pady=(10, 0))
        
        # Konfiguracja grid
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        self.logs_tab.columnconfigure(0, weight=1)
        self.logs_tab.rowconfigure(0, weight=1)
        
    # Usuniƒôto setup_combo_content - zastƒÖpione przez setup_combo_tab
    # Usuniƒôto setup_extra_functions_content - zastƒÖpione przez setup_extra_tab
    
    def select_all_combo_steps(self):
        """Zaznacza wszystkie kroki KOMBO"""
        for var in self.combo_steps_enabled.values():
            var.set(True)
    
    def deselect_all_combo_steps(self):
        """Odznacza wszystkie kroki KOMBO"""
        for var in self.combo_steps_enabled.values():
            var.set(False)
        

        

        

        

        
    def log(self, message):
        """Dodaje wiadomo≈õƒá do log√≥w"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        # Usuniƒôto self.root.update_idletasks() - mo≈ºe powodowaƒá problemy z GUI
        
    def run_combo_workflow(self):
        """Uruchamia wybrany przep≈Çyw KOMBO na podstawie zaznaczonych checkbox√≥w"""
        from datetime import datetime
        
        # Reset flagi stop
        self.stop_flags['combo'] = False
        
        # Sprawd≈∫ czy jakikolwiek krok jest zaznaczony
        enabled_steps = [key for key, var in self.combo_steps_enabled.items() if var.get()]
        
        if not enabled_steps:
            messagebox.showwarning("Brak krok√≥w", "Nie wybrano ≈ºadnego kroku do wykonania!")
            return
        
        self.combo_start_time = datetime.now()
        self.combo_step_times = {}  # S≈Çownik na czasy krok√≥w
        
        enabled_steps_text = ", ".join(enabled_steps)
        self.log(f"[KOMBO] Rozpoczynam wybrany przep≈Çyw KOMBO o {self.combo_start_time.strftime('%H:%M:%S')}")
        self.log(f"[KOMBO] Wybrane kroki: {enabled_steps_text}")
        self.show_stop_button('combo')
        
        # Wszystkie dostƒôpne kroki z mapowaniem
        all_steps = {
            'translate': ("T≈Çumaczenie na angielski", self.run_translate_for_combo),
            'generate': ("Generowanie audio", self.run_generate_for_combo),
            'overlay': ("Nak≈Çadanie audio na wideo (STABILNIE)", self.run_overlay_for_combo),
            'delete_sm': ("Usuwanie ciszy i bezruchu (STABILNIE)", self.run_delete_sm_for_combo),
            'white_logo': ("Usu≈Ñ bia≈ÇƒÖ stopkƒô i dodaj logo", self.run_white_logo_for_combo),
            'detect_polish': ("Wykrywanie polskiego tekstu", self.run_detect_polish_for_combo),
            'intro_outro': ("Dodawanie intro i outro (SZYBKO)", self.run_intro_outro_for_combo),
            'social_media': ("Generowanie posta social media", self.run_social_media_for_combo)
        }
        
        # Buduj listƒô krok√≥w do wykonania na podstawie checkbox√≥w
        self.combo_steps = []
        for step_key in ['translate', 'generate', 'overlay', 'delete_sm', 'white_logo', 'detect_polish', 'intro_outro', 'social_media']:
            if self.combo_steps_enabled[step_key].get():
                self.combo_steps.append(all_steps[step_key])
        
        self.current_combo_step = 0
        self.combo_failed = False
        self.execute_next_combo_step()
        
    def execute_next_combo_step(self):
        """Wykonuje nastƒôpny krok w przep≈Çywie KOMBO"""
        from datetime import datetime
        
        # Sprawd≈∫ czy u≈ºytkownik zatrzyma≈Ç proces
        if self.stop_flags.get('combo', False):
            self.log("[KOMBO] Przep≈Çyw KOMBO zatrzymany przez u≈ºytkownika")
            self.update_progress('combo', 0, "Zatrzymano")
            self.hide_stop_button('combo')
            self.stop_flags['combo'] = False  # Reset flagi
            return
        
        if self.combo_failed or self.current_combo_step >= len(self.combo_steps):
            if self.combo_failed:
                self.log("[KOMBO] Przep≈Çyw KOMBO przerwany z powodu b≈Çƒôdu")
                self.update_progress('combo', 0, "B≈ÇƒÖd")
            else:
                # Generuj ko≈Ñcowy raport
                self.generate_combo_final_report()
                self.update_progress('combo', 100, "Uko≈Ñczono")
            self.hide_stop_button('combo')
            return
            
        step_name, step_function = self.combo_steps[self.current_combo_step]
        progress = (self.current_combo_step / len(self.combo_steps)) * 100
        
        # Rozpocznij ≈õledzenie czasu kroku
        self.current_step_start_time = datetime.now()
        
        self.update_progress('combo', progress, f"Krok {self.current_combo_step + 1}/{len(self.combo_steps)}: {step_name}")
        self.log(f"[KOMBO] Krok {self.current_combo_step + 1}: {step_name} - START")
        
        # Wykonaj krok
        try:
            step_function()
        except Exception as e:
            self.log(f"[KOMBO] B≈ÇƒÖd w kroku {step_name}: {str(e)}")
            self.combo_failed = True
            self.execute_next_combo_step()
            
    def finish_current_combo_step(self):
        """Ko≈Ñczy bie≈ºƒÖcy krok i zapisuje czas wykonania"""
        from datetime import datetime
        
        if hasattr(self, 'current_step_start_time'):
            step_name = self.combo_steps[self.current_combo_step][0]
            step_duration = datetime.now() - self.current_step_start_time
            self.combo_step_times[step_name] = step_duration
            
            duration_str = self.format_duration(step_duration)
            self.log(f"[KOMBO] Krok {self.current_combo_step + 1}: {step_name} - KONIEC (czas: {duration_str})")
        
        self.current_combo_step += 1
        self.execute_next_combo_step()
        
    def format_duration(self, duration):
        """Formatuje czas trwania na czytelny format"""
        total_seconds = int(duration.total_seconds())
        minutes = total_seconds // 60
        seconds = total_seconds % 60
        
        if minutes > 0:
            return f"{minutes}m {seconds}s"
        else:
            return f"{seconds}s"
            
    def generate_combo_final_report(self):
        """Generuje ko≈Ñcowy raport z czasami wykonania"""
        from datetime import datetime
        
        total_duration = datetime.now() - self.combo_start_time
        
        self.log("=" * 60)
        self.log("[KOMBO] RAPORT KO≈ÉCOWY - PE≈ÅNY PRZEP≈ÅYW KOMBO")
        self.log("=" * 60)
        self.log(f"Czas rozpoczƒôcia: {self.combo_start_time.strftime('%H:%M:%S')}")
        self.log(f"Czas zako≈Ñczenia: {datetime.now().strftime('%H:%M:%S')}")
        self.log(f"CA≈ÅKOWITY CZAS: {self.format_duration(total_duration)}")
        self.log("")
        self.log("CZASY POSZCZEG√ìLNYCH KROK√ìW:")
        
        for i, (step_name, _) in enumerate(self.combo_steps):
            if step_name in self.combo_step_times:
                duration = self.combo_step_times[step_name]
                duration_str = self.format_duration(duration)
                self.log(f"  {i+1}. {step_name}: {duration_str}")
            else:
                self.log(f"  {i+1}. {step_name}: nie uko≈Ñczono")
        
        self.log("")
        self.log("[KOMBO] Przep≈Çyw KOMBO zako≈Ñczony pomy≈õlnie!")
        self.log("=" * 60)
            
    def run_translate_for_combo(self):
        """Uruchamia translate.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_translate_combo_thread, daemon=False)
        thread.start()
        
    def _run_translate_combo_thread(self):
        """Thread dla translate w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Znajd≈∫ plik _sentences.txt
            sentences_files = list(working_dir.rglob("*_sentences.txt"))
            if not sentences_files:
                raise Exception("Nie znaleziono pliku *_sentences.txt")
                
            sentences_file = sentences_files[0]
            
            # Wygeneruj nazwƒô pliku wyj≈õciowego (zamie≈Ñ _sentences.txt na _en.txt)
            output_file = sentences_file.with_name(sentences_file.stem.replace("_sentences", "_en") + ".txt")
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            translate_script = Path(__file__).parent / "translate.py"
            
            result = subprocess.run([
                str(python_exe), str(translate_script), str(sentences_file), str(output_file)
            ], capture_output=True, text=True, cwd=working_dir)
            
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] T≈Çumaczenie zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd translate.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd translate.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd t≈Çumaczenia: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
            
    def run_generate_for_combo(self):
        """Uruchamia generate.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_generate_combo_thread, daemon=False)
        thread.start()
        
    def _run_generate_combo_thread(self):
        """Thread dla generate w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Znajd≈∫ plik _en.txt (przet≈Çumaczony)
            en_files = list(working_dir.rglob("*_en.txt"))
            if not en_files:
                raise Exception("Nie znaleziono pliku *_en.txt")
                
            en_file = en_files[0]
            
            # Znajd≈∫ oryginalny plik wideo
            video_extensions = ['.mp4', '.avi', '.mov', '.mkv']
            video_files = []
            for ext in video_extensions:
                video_files.extend(working_dir.rglob(f"*{ext}"))
            
            if not video_files:
                raise Exception("Nie znaleziono pliku wideo")
                
            video_file = video_files[0]
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            generate_script = Path(__file__).parent / "generate.py"
            
            result = subprocess.run([
                str(python_exe), str(generate_script), str(en_file), str(video_file)
            ], capture_output=True, text=True, cwd=working_dir)
            
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] Generowanie audio zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd generate.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd generate.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd generowania audio: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
        
    def run_overlay_for_combo(self):
        """Uruchamia overlay_fixed.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_overlay_combo_thread, daemon=False)
        thread.start()
        
    def _run_overlay_combo_thread(self):
        """Thread dla overlay_fixed w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Znajd≈∫ plik _en.txt (przet≈Çumaczony)
            en_files = list(working_dir.rglob("*_en.txt"))
            if not en_files:
                raise Exception("Nie znaleziono pliku *_en.txt")
                
            en_file = en_files[0]
            
            # Znajd≈∫ oryginalny plik wideo
            video_extensions = ['.mp4', '.avi', '.mov', '.mkv']
            video_files = []
            for ext in video_extensions:
                video_files.extend(working_dir.rglob(f"*{ext}"))
            
            if not video_files:
                raise Exception("Nie znaleziono pliku wideo")
                
            video_file = video_files[0]
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            overlay_script = Path(__file__).parent / "overlay_fixed.py"
            
            result = subprocess.run([
                str(python_exe), str(overlay_script), str(en_file), str(video_file)
            ], capture_output=True, text=True, cwd=working_dir)
            
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] Nak≈Çadanie audio zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd overlay_fixed.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd overlay_fixed.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd nak≈Çadania audio: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
        
    def run_delete_sm_for_combo(self):
        """Uruchamia delete_sm.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_delete_sm_combo_thread, daemon=False)
        thread.start()
        
    def _run_delete_sm_combo_thread(self):
        """Thread dla delete_sm w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Oryginalny delete_sm.py nie wymaga pliku t≈Çumaczenia
            
            # Znajd≈∫ plik *_synchronized.* (po overlay, przed usuwaniem ciszy)
            video_extensions = ['.mp4', '.avi', '.mov', '.mkv']
            video_files = []
            for ext in video_extensions:
                # Szukaj konkretnie plik√≥w *_synchronized.* (nie *_no_silence.*)
                pattern = f"*_synchronized{ext}"
                video_files.extend(working_dir.rglob(pattern))
            
            if video_files:
                # Je≈õli jest kilka, we≈∫ najnowszy
                video_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                video_file = video_files[0]
            else:
                raise Exception("Nie znaleziono pliku *_synchronized.* - uruchom najpierw overlay audio")
            
            # Wygeneruj nazwƒô pliku wyj≈õciowego
            output_file = video_file.with_name(video_file.stem + "_no_silence" + video_file.suffix)
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            delete_sm_script = Path(__file__).parent / "delete_sm.py" # U≈ºywamy stabilnej wersji
            
            # Uruchom delete_sm.py (bez logowania w czasie rzeczywistym)
            result = subprocess.run([
                str(python_exe), str(delete_sm_script),
                str(video_file), str(output_file)
            ], capture_output=True, text=True, cwd=working_dir)
            
            # Sprawd≈∫ wynik
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] Usuwanie ciszy i bezruchu zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd delete_sm.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd delete_sm.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd usuwania ciszy: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
        
    def run_white_logo_for_combo(self):
        """Uruchamia white-bottom-logo.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_white_logo_combo_thread, daemon=False)
        thread.start()
        
    def _run_white_logo_combo_thread(self):
        """Thread dla white-bottom-logo.py w przep≈Çywie KOMBO"""
        try:
            working_dir = self.working_dir.get()
            if not working_dir:
                self.root.after(0, lambda: self.log("[KOMBO] B≈ÇƒÖd: Nie ustawiono folderu roboczego"))
                self.combo_failed = True
                self.root.after(0, self.execute_next_combo_step)
                return
            
            # Uruchom skrypt w trybie KOMBO (bez argument√≥w)
            self.run_script("white-bottom-logo.py", [], "Usu≈Ñ bia≈ÇƒÖ stopkƒô i dodaj logo", 
                          on_success=lambda output: self._on_white_logo_success(output))
            
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd dodawania logo: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
    
    def _on_white_logo_success(self, output):
        """Callback po pomy≈õlnym dodaniu logo"""
        self.root.after(0, lambda: self.log(f"[KOMBO] Dodawanie logo zako≈Ñczone pomy≈õlnie"))
        if output:
            self.root.after(0, lambda: self.log(f"[KOMBO] Output: {output}"))
        self.root.after(0, self.execute_next_combo_step)
        
    def run_detect_polish_for_combo(self):
        """Uruchamia detect_polish_text.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_detect_polish_combo_thread, daemon=False)
        thread.start()
        
    def _run_detect_polish_combo_thread(self):
        """Thread dla detect_polish w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Znajd≈∫ najnowszy plik wideo (powinien byƒá po delete_sm)
            video_extensions = ['.mp4', '.avi', '.mov', '.mkv']
            video_files = []
            for ext in video_extensions:
                video_files.extend(working_dir.rglob(f"*{ext}"))
            
            # Sortuj wed≈Çug czasu modyfikacji - najnowszy najprawdopodobniej po delete_sm
            if video_files:
                video_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                video_file = video_files[0]
            else:
                raise Exception("Nie znaleziono pliku wideo")
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            detect_script = Path(__file__).parent / "detect_polish_text.py"
            
            # U≈ºyj domy≈õlnych warto≈õci z krokiem 40s jak user wcze≈õniej wspomnia≈Ç
            result = subprocess.run([
                str(python_exe), str(detect_script), str(video_file),
                "--interval", "40.0",
                "--confidence", "0.6"
            ], capture_output=True, text=True, cwd=working_dir)
            
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] Wykrywanie polskiego tekstu zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd detect_polish_text.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd detect_polish_text.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd wykrywania polskiego tekstu: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
        
    def run_intro_outro_for_combo(self):
        """Uruchamia add_intro_outro.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_intro_outro_combo_thread, daemon=False)
        thread.start()
        
    def _run_intro_outro_combo_thread(self):
        """Thread dla intro_outro w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Szukaj pliku po dodaniu logo (krok 5)
            logo_files = list(working_dir.rglob("*_with_logo.mp4"))
            
            if logo_files:
                # U≈ºyj pliku po dodaniu logo
                video_file = logo_files[0]
                self.root.after(0, lambda: self.log(f"[KOMBO] U≈ºywam pliku po dodaniu logo: {video_file.name}"))
            else:
                # Fallback - szukaj pliku po detect_polish (je≈õli krok logo by≈Ç wy≈ÇƒÖczony)
                polish_files = list(working_dir.rglob("*_polish_text_detection.mp4"))
                if polish_files:
                    video_file = polish_files[0]
                    self.root.after(0, lambda: self.log(f"[KOMBO] U≈ºywam pliku po detect_polish: {video_file.name}"))
                else:
                    # Ostatni fallback - najnowszy plik
                    video_extensions = ['.mp4', '.avi', '.mov', '.mkv']
                    video_files = []
                    for ext in video_extensions:
                        video_files.extend(working_dir.rglob(f"*{ext}"))
                    
                    if video_files:
                        video_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                        video_file = video_files[0]
                        self.root.after(0, lambda: self.log(f"[KOMBO] U≈ºywam najnowszy plik: {video_file.name}"))
                    else:
                        raise Exception("Nie znaleziono pliku wideo")
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            intro_outro_script = Path(__file__).parent / "add_intro_outro_fast.py"  # U≈ºyj szybkiej wersji
            
            # Podstawowe wywo≈Çanie - skrypt u≈ºywa domy≈õlnych ≈õcie≈ºek dla intro/outro
            # Uruchom z folderu g≈Ç√≥wnego projektu, ≈ºeby znale≈∫ƒá intro_outro
            project_root = Path(__file__).parent.parent
            result = subprocess.run([
                str(python_exe), str(intro_outro_script), str(video_file)
            ], capture_output=True, text=True, cwd=project_root)
            
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] Dodawanie intro i outro zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd add_intro_outro.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd add_intro_outro.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd dodawania intro/outro: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
        
    def run_social_media_for_combo(self):
        """Uruchamia social_media_post.py dla przep≈Çywu KOMBO"""
        thread = threading.Thread(target=self._run_social_media_combo_thread, daemon=False)
        thread.start()
        
    def _run_social_media_combo_thread(self):
        """Thread dla social_media w przep≈Çywie KOMBO"""
        try:
            working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
            
            # Znajd≈∫ plik _sentences.txt (oryginalny polski)
            sentences_files = list(working_dir.rglob("*_sentences.txt"))
            if not sentences_files:
                raise Exception("Nie znaleziono pliku *_sentences.txt")
                
            sentences_file = sentences_files[0]
            
            python_exe = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
            social_media_script = Path(__file__).parent / "social_media_post.py"
            
            result = subprocess.run([
                str(python_exe), str(social_media_script), str(sentences_file),
                "--format", "docx"
            ], capture_output=True, text=True, cwd=working_dir)
            
            if result.returncode == 0:
                self.root.after(0, lambda: self.log("[KOMBO] Generowanie posta social media zako≈Ñczone pomy≈õlnie"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Output: {result.stdout.strip()}"))
                self.root.after(0, self.finish_current_combo_step)
            else:
                error_msg = result.stderr.strip() if result.stderr else "Nieznany b≈ÇƒÖd"
                self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd social_media_post.py: {error_msg}"))
                if result.stdout:
                    self.root.after(0, lambda: self.log(f"[KOMBO] Stdout: {result.stdout.strip()}"))
                raise Exception(f"B≈ÇƒÖd social_media_post.py: {error_msg}")
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"[KOMBO] B≈ÇƒÖd generowania posta social media: {str(e)}"))
            self.combo_failed = True
            self.root.after(0, self.execute_next_combo_step)
        
    def clear_logs(self):
        """Czy≈õci logi"""
        self.log_text.delete(1.0, tk.END)
        
    def update_progress(self, step, progress, message, estimated_time=None):
        """Aktualizuje pasek postƒôpu i etykietƒô"""
        try:
            self.progress_vars[step].set(progress)
            if estimated_time:
                self.progress_labels[step].set(f"{message} ({progress:.1f}%) - Pozosta≈Ço: {estimated_time}")
            else:
                self.progress_labels[step].set(f"{message} ({progress:.1f}%)")
        except Exception as e:
            self.log(f"B≈ÇƒÖd aktualizacji postƒôpu: {e}")
            
    def show_stop_button(self, step):
        """Pokazuje przycisk stop dla danego kroku"""
        try:
            if step == 'step1':
                self.step1_stop_btn.pack(anchor=tk.E, pady=(5, 0))
            elif step == 'step2':
                self.step2_stop_btn.pack(anchor=tk.E, pady=(5, 0))
            elif step == 'step3':
                self.step3_stop_btn.pack(anchor=tk.E, pady=(5, 0))
        except Exception as e:
            self.log(f"B≈ÇƒÖd pokazywania przycisku stop: {e}")
            
    def hide_stop_button(self, step):
        """Ukrywa przycisk stop dla danego kroku"""
        try:
            if step == 'step1':
                self.step1_stop_btn.pack_forget()
            elif step == 'step2':
                self.step2_stop_btn.pack_forget()
            elif step == 'step3':
                self.step3_stop_btn.pack_forget()
        except Exception as e:
            self.log(f"B≈ÇƒÖd ukrywania przycisku stop: {e}")
            
    def stop_operation(self, step):
        """Przerywa operacjƒô dla danego kroku"""
        try:
            self.stop_flags[step] = True
            if self.current_process:
                self.current_process.terminate()
                self.log(f"Pr√≥ba przerwania operacji {step}...")
            self.update_progress(step, 0, "Przerywanie...")
        except Exception as e:
            self.log(f"B≈ÇƒÖd przerwania operacji: {e}")
            
    def parse_progress_from_output(self, line, script_name):
        """Parsuje postƒôp z outputu skryptu"""
        try:
            # Wzorce dla r√≥≈ºnych skrypt√≥w
            patterns = {
                'transcribe_api.py': [
                    r'Starting audio extraction',
                    r'Audio extraction successful',
                    r'Starting transcription using OpenAI API',
                    r'Transcription completed successfully',
                    r'Processing complete'
                ],
                'transcribe_improved.py': [
                    r'Processing frame (\d+)/(\d+)',
                    r'Transcribing.*?(\d+)%',
                    r'Loading Whisper model',
                    r'Transcription completed'
                ],
                'detect_polish_text.py': [
                    r'Processing frame (\d+)/(\d+)',
                    r'Analyzing frame (\d+)/(\d+)',
                    r'Detection completed'
                ],
                'delete_sm.py': [
                    r'Processing frame (\d+)/(\d+)',
                    r'Analyzing gap (\d+)/(\d+)',
                    r'Compression completed'
                ],
                'youtube_downloader.py': [
                    r'(\d+\.?\d*)%',
                    r'Download completed',
                    r'Pobrano pomy≈õlnie'
                ]
            }
            
            if script_name in patterns:
                for pattern in patterns[script_name]:
                    match = re.search(pattern, line, re.IGNORECASE)
                    if match:
                        if script_name == 'transcribe_api.py':
                            if 'Starting audio extraction' in pattern:
                                return 10, "Ekstrakcja audio..."
                            elif 'Audio extraction successful' in pattern:
                                return 30, "Audio wyekstraktowane"
                            elif 'Starting transcription using OpenAI API' in pattern:
                                return 50, "Transkrypcja przez API..."
                            elif 'Transcription completed successfully' in pattern:
                                return 80, "Transkrypcja zako≈Ñczona"
                            elif 'Processing complete' in pattern:
                                return 100, "Przetwarzanie zako≈Ñczone"
                        elif 'frame' in pattern:
                            current, total = int(match.group(1)), int(match.group(2))
                            return (current / total) * 100, f"Przetwarzanie klatki {current}/{total}"
                        elif '%' in pattern:
                            percent = float(match.group(1))
                            return percent, f"Postƒôp: {percent:.1f}%"
                        elif 'completed' in pattern or 'pomy≈õlnie' in pattern:
                            return 100, "Zako≈Ñczone"
                        elif 'Loading' in pattern:
                            return 10, "≈Åadowanie modelu..."
                            
            # Sprawd≈∫ czy to jest b≈ÇƒÖd
            if 'error' in line.lower() or 'b≈ÇƒÖd' in line.lower():
                return None, f"B≈ÇƒÖd: {line}"
                
            return None, None
            
        except Exception as e:
            return None, None
            
    def estimate_remaining_time(self, start_time, progress):
        """Szacuje pozosta≈Çy czas na podstawie postƒôpu"""
        try:
            if progress <= 0:
                return "obliczanie..."
                
            elapsed = time.time() - start_time
            if progress >= 100:
                return "zako≈Ñczone"
                
            # Szacuj czas pozosta≈Çy
            total_estimated = elapsed / (progress / 100)
            remaining = total_estimated - elapsed
            
            if remaining < 60:
                return f"{remaining:.0f}s"
            elif remaining < 3600:
                minutes = remaining // 60
                seconds = remaining % 60
                return f"{minutes:.0f}m {seconds:.0f}s"
            else:
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                return f"{hours:.0f}h {minutes:.0f}m"
                
        except Exception:
            return "obliczanie..."
            
    def get_system_info(self):
        """Pobiera informacje o systemie"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            
            return f"CPU: {cpu_percent:.1f}% | RAM: {memory_percent:.1f}%"
        except Exception:
            return "Informacje o systemie niedostƒôpne"
        
    def select_working_dir(self):
        """Wybiera folder roboczy"""
        directory = filedialog.askdirectory()
        if directory:
            self.working_dir.set(directory)
            self.save_config()
            self.log(f"Ustawiono folder roboczy: {directory}")
            
    def select_video_file(self):
        """Wybiera plik wideo i automatycznie uruchamia transkrypcjƒô"""
        file_path = filedialog.askopenfilename(
            title="Wybierz plik wideo",
            filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv"), ("All files", "*.*")]
        )
        if file_path:
            self.video_path.set(file_path)
            self.log(f"Wybrano plik wideo: {file_path}")
            # Automatycznie uruchom transkrypcjƒô
            self.run_transcription(file_path)
            
    def select_logo_video(self):
        """Wybiera plik wideo do dodania logo"""
        file_path = filedialog.askopenfilename(
            title="Wybierz plik wideo",
            filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv"), ("All files", "*.*")]
        )
        if file_path:
            self.logo_video_path.set(file_path)
            

            
    def find_latest_video_file(self, directory):
        """Znajduje najnowszy plik wideo w katalogu"""
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv']
        video_files = []
        
        for ext in video_extensions:
            video_files.extend(Path(directory).glob(f"*{ext}"))
        
        if not video_files:
            return None
            
        # Sortuj po czasie modyfikacji (najnowszy pierwszy)
        latest_file = max(video_files, key=lambda x: x.stat().st_mtime)
        return latest_file
    
    def run_script(self, script_name, args=None, step_name="Operacja", on_success=None, step_key=None):
        """Uruchamia skrypt w osobnym wƒÖtku z obs≈ÇugƒÖ postƒôpu"""
        def run():
            nonlocal args
            start_time = time.time()
            current_progress = 0
            
            try:
                self.log(f"Rozpoczynam {step_name}...")
                self.current_step.set(f"W trakcie: {step_name}")
                
                # Inicjalizuj postƒôp
                if step_key:
                    self.stop_flags[step_key] = False
                    self.update_progress(step_key, 0, "Rozpoczynanie...")
                    self.show_stop_button(step_key)
                
                # Upewnij siƒô, ≈ºe args jest zdefiniowane
                if args is None:
                    args = []
                
                # Przygotuj ≈õcie≈ºkƒô do skryptu
                if hasattr(sys, '_MEIPASS'):
                    # Uruchomione z .exe - skrypt jest w bundled resources
                    bundled_script_path = Path(sys._MEIPASS) / script_name
                    
                    if bundled_script_path.exists():
                        import shutil
                        
                        # Spr√≥buj r√≥≈ºne lokalizacje do skopiowania skryptu (macOS compatibility)
                        copy_locations = [
                            Path.cwd() / script_name,  # Bie≈ºƒÖcy katalog
                            Path.home() / "Documents" / script_name,  # Dokumenty u≈ºytkownika
                            Path.home() / "Desktop" / script_name,  # Pulpit u≈ºytkownika
                            Path("/tmp") / script_name if Path("/tmp").exists() else None,  # /tmp na macOS/Linux
                        ]
                        
                        script_path = None
                        copied = False
                        
                        for working_script_path in copy_locations:
                            if working_script_path is None:
                                continue
                                
                            try:
                                # Upewnij siƒô, ≈ºe katalog istnieje
                                working_script_path.parent.mkdir(parents=True, exist_ok=True)
                                shutil.copy2(bundled_script_path, working_script_path)
                                script_path = working_script_path
                                self.log(f"Skopiowano skrypt do: {working_script_path}")
                                copied = True
                                break
                            except (OSError, PermissionError):
                                continue
                        
                        if not copied:
                            # Je≈õli nie uda≈Ço siƒô skopiowaƒá, spr√≥buj uruchomiƒá bezpo≈õrednio z bundled
                            script_path = bundled_script_path
                            self.log(f"‚ö†Ô∏è Nie uda≈Ço siƒô skopiowaƒá skryptu - u≈ºywam bezpo≈õrednio z bundle: {script_name}")
                    else:
                        self.log(f"‚ö†Ô∏è Nie znaleziono skryptu w bundled resources: {bundled_script_path}")
                        script_path = Path(__file__).parent / script_name
                    
                    # Je≈õli to add_intro_outro.py, musimy te≈º skopiowaƒá pliki intro/outro
                    if script_name == "add_intro_outro.py" and args:
                        # Znajd≈∫ argumenty --intro i --outro i zamie≈Ñ ≈õcie≈ºki
                        new_args = []
                        i = 0
                        # Utw√≥rz unikalny folder tymczasowy dla intro/outro
                        temp_intro_outro_dir = None
                        
                        while i < len(args):
                            if args[i] == "--intro" and i + 1 < len(args):
                                # Skopiuj plik intro do dostƒôpnej lokalizacji
                                bundled_intro = Path(args[i + 1])
                                if bundled_intro.exists() and "_MEI" in str(bundled_intro):
                                    # Utw√≥rz unikalny folder tymczasowy
                                    if temp_intro_outro_dir is None:
                                        temp_intro_outro_dir = Path.cwd() / f"intro_outro_temp_{int(time.time())}"
                                        temp_intro_outro_dir.mkdir(exist_ok=True)
                                        self.log(f"Utworzono tymczasowy folder: {temp_intro_outro_dir.name}")
                                    
                                    local_intro = temp_intro_outro_dir / bundled_intro.name
                                    shutil.copy2(bundled_intro, local_intro)
                                    new_args.extend(["--intro", str(local_intro)])
                                    self.log(f"Skopiowano intro: {bundled_intro.name}")
                                else:
                                    new_args.extend([args[i], args[i + 1]])
                                i += 2
                            elif args[i] == "--outro" and i + 1 < len(args):
                                # Skopiuj plik outro do dostƒôpnej lokalizacji
                                bundled_outro = Path(args[i + 1])
                                if bundled_outro.exists() and "_MEI" in str(bundled_outro):
                                    # U≈ºyj tego samego folderu tymczasowego
                                    if temp_intro_outro_dir is None:
                                        temp_intro_outro_dir = Path.cwd() / f"intro_outro_temp_{int(time.time())}"
                                        temp_intro_outro_dir.mkdir(exist_ok=True)
                                        self.log(f"Utworzono tymczasowy folder: {temp_intro_outro_dir.name}")
                                    
                                    local_outro = temp_intro_outro_dir / bundled_outro.name
                                    shutil.copy2(bundled_outro, local_outro)
                                    new_args.extend(["--outro", str(local_outro)])
                                    self.log(f"Skopiowano outro: {bundled_outro.name}")
                                else:
                                    new_args.extend([args[i], args[i + 1]])
                                i += 2
                            else:
                                new_args.append(args[i])
                                i += 1
                        args = new_args
                else:
                    # Uruchomione z kodu ≈∫r√≥d≈Çowego
                    script_path = Path(__file__).parent / script_name
                
                # Sprawd≈∫ czy jeste≈õmy w ≈õrodowisku wirtualnym lub .exe
                if hasattr(sys, '_MEIPASS'):
                    # Uruchomione z .exe (PyInstaller)
                    # Musimy u≈ºyƒá Pythona ze ≈õrodowiska wirtualnego, nie .exe
                    # Znajd≈∫ katalog zawierajƒÖcy .exe (powinien byƒá w dist/)
                    exe_dir = Path(sys.executable).parent
                    # Sprawd≈∫ r√≥≈ºne mo≈ºliwe lokalizacje ≈õrodowiska wirtualnego
                    possible_venv_paths = [
                        exe_dir.parent / "myenv" / "Scripts" / "python.exe",  # ../myenv/Scripts/python.exe
                        Path.cwd() / "myenv" / "Scripts" / "python.exe",      # ./myenv/Scripts/python.exe
                        Path.cwd().parent / "myenv" / "Scripts" / "python.exe" # ../myenv/Scripts/python.exe
                    ]
                    
                    python_executable = None
                    for venv_path in possible_venv_paths:
                        if venv_path.exists():
                            python_executable = str(venv_path)
                            self.log(f"Uruchomione z .exe, znaleziono Pythona: {python_executable}")
                            break
                    
                    if not python_executable:
                        # Fallback - spr√≥buj znale≈∫ƒá Python w systemie
                        python_executable = "python"
                        self.log(f"‚ö†Ô∏è Nie znaleziono ≈õrodowiska wirtualnego, u≈ºywam: {python_executable}")
                elif hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
                    # Jeste≈õmy w ≈õrodowisku wirtualnym
                    python_executable = sys.executable
                    self.log(f"U≈ºywam Pythona ze ≈õrodowiska wirtualnego: {python_executable}")
                else:
                    # Spr√≥buj znale≈∫ƒá ≈õrodowisko wirtualne
                    venv_python = Path(__file__).parent.parent / "myenv" / "Scripts" / "python.exe"
                    if venv_python.exists():
                        python_executable = str(venv_python)
                        self.log(f"Znaleziono ≈õrodowisko wirtualne: {python_executable}")
                    else:
                        python_executable = sys.executable
                        self.log(f"‚ö†Ô∏è Nie znaleziono ≈õrodowiska wirtualnego, u≈ºywam: {python_executable}")
                
                cmd = [python_executable, str(script_path)]
                if args:
                    cmd.extend(args)
                
                self.log(f"Komenda: {' '.join(cmd)}")
                
                # Uruchom proces
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd=self.working_dir.get() if self.working_dir.get() else None
                )
                
                # Zapisz referencjƒô do procesu
                self.current_process = process
                
                # Czytaj output w czasie rzeczywistym
                stdout_lines = []
                stderr_lines = []
                
                while True:
                    # Sprawd≈∫ czy u≈ºytkownik chce przerwaƒá
                    if step_key and self.stop_flags.get(step_key, False):
                        process.terminate()
                        self.log(f"Operacja {step_name} przerwana przez u≈ºytkownika")
                        break
                    
                    output = process.stdout.readline()
                    if output == '' and process.poll() is not None:
                        break
                    if output:
                        line = output.strip()
                        stdout_lines.append(line)
                        self.log(line)
                        
                        # Parsuj postƒôp z outputu
                        if step_key:
                            progress, message = self.parse_progress_from_output(line, script_name)
                            if progress is not None:
                                current_progress = progress
                                estimated_time = self.estimate_remaining_time(start_time, progress)
                                self.update_progress(step_key, progress, message, estimated_time)
                                
                                # Dodaj informacje o systemie co 10%
                                if int(progress) % 10 == 0 and int(progress) > 0:
                                    system_info = self.get_system_info()
                                    self.log(f"[INFO] {system_info}")
                
                # Sprawd≈∫ b≈Çƒôdy
                return_code = process.poll()
                stderr = process.stderr.read()
                
                # Sprawd≈∫ czy proces zako≈Ñczy≈Ç siƒô sukcesem
                success_indicators = ["‚úÖ", "Pobrano pomy≈õlnie", "zako≈Ñczone pomy≈õlnie", "Download completed", "Transcription completed", "API transcription completed successfully", "Processing complete", "[SUKCES] Pobrano pomy≈õlnie", "[SUKCES] Pobieranie zako≈Ñczone pomy≈õlnie"]
                stdout_text = " ".join(stdout_lines)
                
                if return_code == 0 or any(indicator in stdout_text for indicator in success_indicators):
                    self.log(f"‚úÖ {step_name} zako≈Ñczone pomy≈õlnie!")
                    self.current_step.set("Gotowy")
                    
                    # Aktualizuj postƒôp na 100%
                    if step_key:
                        self.update_progress(step_key, 100, "Zako≈Ñczone pomy≈õlnie", "zako≈Ñczone")
                        self.hide_stop_button(step_key)
                    
                    # Wywo≈Çaj funkcjƒô on_success je≈õli zosta≈Ça podana
                    if on_success:
                        try:
                            self.root.after(100, on_success)  # Dodano op√≥≈∫nienie 100ms
                        except Exception as e:
                            self.log(f"[BLAD] B≈ÇƒÖd wywo≈Çania callback: {e}")
                else:
                    self.log(f"[BLAD] B≈ÇƒÖd w {step_name} (kod: {return_code})")
                    if stderr:
                        self.log(f"B≈ÇƒÖd stderr: {stderr}")
                    if stdout_lines:
                        self.log(f"Ostatnie linie stdout: {stdout_lines[-5:]}")  # Ostatnie 5 linii
                    self.current_step.set("B≈ÇƒÖd")
                    
                    # Aktualizuj postƒôp na b≈ÇƒÖd
                    if step_key:
                        self.update_progress(step_key, 0, "B≈ÇƒÖd - sprawd≈∫ logi")
                        self.hide_stop_button(step_key)
                    
            except Exception as e:
                self.log(f"[BLAD] B≈ÇƒÖd podczas {step_name}: {e}")
                import traceback
                self.log(f"Szczeg√≥≈Çy b≈Çƒôdu: {traceback.format_exc()}")
                self.current_step.set("B≈ÇƒÖd")
                
                # Aktualizuj postƒôp na b≈ÇƒÖd
                if step_key:
                    self.update_progress(step_key, 0, "B≈ÇƒÖd - sprawd≈∫ logi")
                    self.hide_stop_button(step_key)
            finally:
                # Wyczy≈õƒá referencjƒô do procesu
                self.current_process = None
                
                # Wyczy≈õƒá skopiowane pliki je≈õli uruchomiono z .exe
                if hasattr(sys, '_MEIPASS'):
                    try:
                        # Usu≈Ñ skopiowany skrypt z r√≥≈ºnych mo≈ºliwych lokalizacji
                        cleanup_locations = [
                            Path.cwd() / script_name,
                            Path.home() / "Documents" / script_name,
                            Path.home() / "Desktop" / script_name,
                            Path("/tmp") / script_name if Path("/tmp").exists() else None,
                        ]
                        
                        for script_path in cleanup_locations:
                            if script_path and script_path.exists():
                                try:
                                    script_path.unlink()
                                    self.log(f"Usuniƒôto tymczasowy skrypt: {script_path}")
                                except Exception as e:
                                    self.log(f"‚ö†Ô∏è Nie uda≈Ço siƒô usunƒÖƒá {script_path}: {e}")
                        
                        # Usu≈Ñ skopiowane pliki intro/outro je≈õli to by≈Ç add_intro_outro.py
                        if script_name == "add_intro_outro.py":
                            # Usu≈Ñ tylko tymczasowe foldery intro_outro_temp_*
                            import glob
                            temp_dirs = glob.glob(str(Path.cwd() / "intro_outro_temp_*"))
                            for temp_dir in temp_dirs:
                                try:
                                    import shutil
                                    shutil.rmtree(temp_dir)
                                    self.log(f"Usuniƒôto tymczasowy folder: {Path(temp_dir).name}")
                                except Exception as e:
                                    self.log(f"‚ö†Ô∏è Nie uda≈Ço siƒô usunƒÖƒá {temp_dir}: {e}")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è Nie uda≈Ço siƒô usunƒÖƒá tymczasowych plik√≥w {script_name}: {e}")
                
                # Usu≈Ñ zako≈Ñczony wƒÖtek z listy
                if hasattr(self, 'active_threads') and thread in self.active_threads:
                    self.active_threads.remove(thread)
        
        # Uruchom w osobnym wƒÖtku
        thread = threading.Thread(target=run)
        thread.daemon = False  # Zmienione z True na False - daemon threads mogƒÖ byƒá zabijane
        thread.start()
        
        # Zapisz referencjƒô do wƒÖtku aby zapobiec jego usuniƒôciu
        if not hasattr(self, 'active_threads'):
            self.active_threads = []
        self.active_threads.append(thread)
        
    def run_transcription(self, video_path):
        """Uruchamia transkrypcjƒô pliku wideo"""
        self.log(f"Rozpoczynam transkrypcjƒô pliku: {video_path}")
        self.run_script("transcribe_api.py", [video_path], "Transkrypcja", 
                       lambda: self.on_transcription_complete(video_path), "step1")
        
    def on_transcription_complete(self, video_path):
        """Wywo≈Çywane po zako≈Ñczeniu transkrypcji"""
        # Znajd≈∫ plik transkrypcji
        video_name = Path(video_path).stem
        working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
        
        self.log(f"Szukam pliku transkrypcji dla: {video_name}")
        
        # Szukaj pliku transkrypcji
        transcription_file = None
        for txt_file in working_dir.rglob(f"{video_name}*.txt"):
            if "_sentences" in txt_file.name:
                transcription_file = txt_file
                self.log(f"Znaleziono plik transkrypcji: {transcription_file}")
                break
        
        if transcription_file:
            self.last_transcription_file = transcription_file
            self.show_transcription_complete_dialog(video_path, transcription_file)
        else:
            self.log("[BLAD] Nie znaleziono pliku transkrypcji")
            self.log(f"Szukane wzorce: {video_name}*_sentences.txt")
            # Poka≈º dostƒôpne pliki txt
            txt_files = list(working_dir.rglob("*.txt"))
            if txt_files:
                self.log("Dostƒôpne pliki .txt:")
                for txt_file in txt_files:
                    self.log(f"  - {txt_file.name}")
            else:
                self.log("Brak plik√≥w .txt w folderze roboczym")
            
    def show_transcription_complete_dialog(self, video_path, transcription_file):
        """Pokazuje dialog po zako≈Ñczeniu transkrypcji"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Transkrypcja zako≈Ñczona")
        dialog.geometry("400x200")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centruj dialog
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (400 // 2)
        y = (dialog.winfo_screenheight() // 2) - (200 // 2)
        dialog.geometry(f"400x200+{x}+{y}")
        
        # Zawarto≈õƒá dialogu
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(main_frame, text="‚úÖ Transkrypcja zako≈Ñczona pomy≈õlnie!", 
                 font=('Arial', 12, 'bold')).pack(pady=(0, 10))
        
        ttk.Label(main_frame, text="Por√≥wnaj transkrypcjƒô z wideo:", 
                 font=('Arial', 10)).pack(pady=(0, 20))
        
        # Przyciski
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        def open_files():
            try:
                # Otw√≥rz plik wideo
                os.startfile(video_path)
                # Otw√≥rz plik transkrypcji
                os.startfile(transcription_file)
            except Exception as e:
                self.log(f"[BLAD] B≈ÇƒÖd podczas otwierania plik√≥w: {e}")
            dialog.destroy()
            
        def close_dialog():
            dialog.destroy()
            
        ttk.Button(button_frame, text="[FOLDER] Otw√≥rz plik wideo i transkrypcjƒô tekstowƒÖ",
                  command=open_files).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="[CANCEL] Nie teraz", 
                  command=close_dialog).pack(side=tk.LEFT)
        
    def run_step1(self, source_type):
        """Uruchamia krok 1"""
        if source_type == 'youtube':
            if not self.youtube_url.get():
                messagebox.showerror("B≈ÇƒÖd", "Wprowad≈∫ link do YouTube!")
                return
            
            # Sprawd≈∫ folder roboczy
            working_dir = self.working_dir.get()
            if not working_dir:
                messagebox.showerror("B≈ÇƒÖd", "Ustaw folder roboczy przed pobieraniem!")
                return
                
            self.log(f"Folder roboczy: {working_dir}")
            
            # Uruchom pobieranie z automatycznƒÖ transkrypcjƒÖ po zako≈Ñczeniu
            def on_download_complete():
                # Znajd≈∫ najnowszy plik wideo
                latest_video = self.find_latest_video_file(working_dir)
                if latest_video:
                    self.last_downloaded_video = latest_video
                    self.log(f"Znaleziono pobrany plik: {latest_video}")
                    # Automatycznie uruchom transkrypcjƒô
                    self.run_transcription(str(latest_video))
                else:
                    self.log("[BLAD] Nie znaleziono pobranego pliku wideo")
            
            self.run_script("youtube_downloader.py", [self.youtube_url.get(), "-o", working_dir], 
                           "Pobieranie z YouTube", on_download_complete, "step1")
        else:
            if not self.video_path.get():
                messagebox.showerror("B≈ÇƒÖd", "Wybierz plik wideo!")
                return
            self.run_transcription(self.video_path.get())
            

                

            
    def revert_gap_removal(self):
        """Cofa usuniƒôcie luki"""
        if not self.gap_numbers.get():
            messagebox.showerror("B≈ÇƒÖd", "Wprowad≈∫ numery luk!")
            return
            
        working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
        video_files = list(working_dir.rglob("*_synchronized.mp4"))
        
        if not video_files:
            messagebox.showerror("B≈ÇƒÖd", "Nie znaleziono plik√≥w *_synchronized.mp4!")
            return
            
        for video_file in video_files:
            self.run_script("reprocess_delete_sm.py", [str(video_file), self.gap_numbers.get()], 
                          f"Cofanie luki {video_file.name}")
            
    def add_logo(self):
        """Dodaje logo i bia≈ÇƒÖ stopkƒô"""
        if not self.logo_video_path.get():
            messagebox.showerror("B≈ÇƒÖd", "Wybierz plik wideo!")
            return
            
        self.run_script("white-bottom-logo.py", [self.logo_video_path.get()], "Dodawanie logo")
        
    def add_intro_outro(self, on_success=None):
        """Dodaje intro i outro"""
        if not all([self.intro_video_path.get(), self.main_video_path.get(), self.outro_video_path.get()]):
            messagebox.showerror("B≈ÇƒÖd", "Wybierz wszystkie pliki (intro, g≈Ç√≥wne wideo, outro)!")
            return
            
        args = [
            self.main_video_path.get(),  # G≈Ç√≥wny plik wideo jako pierwszy argument pozycyjny
            "--intro", self.intro_video_path.get(),
            "--outro", self.outro_video_path.get()
        ]
        self.run_script("add_intro_outro.py", args, "Dodawanie intro/outro", on_success)
        
    def add_intro_outro_fast(self):
        """Szybko dodaje intro i outro u≈ºywajƒÖc ffmpeg"""
        if not self.main_video_path.get():
            messagebox.showerror("B≈ÇƒÖd", "Wybierz g≈Ç√≥wne wideo!")
            return
        
        args = [self.main_video_path.get()]
        
        # Dodaj argumenty intro/outro je≈õli sƒÖ dostƒôpne
        if self.intro_video_path.get():
            args.extend(["--intro", self.intro_video_path.get()])
        if self.outro_video_path.get():
            args.extend(["--outro", self.outro_video_path.get()])
        
        self.run_script("add_intro_outro_fast.py", args, "Szybkie dodawanie intro/outro")
        

            
    def show_available_files(self):
        """Pokazuje dostƒôpne pliki w folderze roboczym"""
        working_dir = Path(self.working_dir.get()) if self.working_dir.get() else Path.cwd()
        
        self.log("=== DOSTƒòPNE PLIKI W FOLDERZE ROBOCZYM ===")
        if not working_dir.exists():
            self.log("[BLAD] Folder roboczy nie istnieje!")
            return
            
        for file_path in working_dir.rglob("*"):
            if file_path.is_file():
                file_size = file_path.stat().st_size
                size_str = f"({file_size / (1024*1024):.1f} MB)" if file_size > 1024*1024 else f"({file_size / 1024:.1f} KB)"
                self.log(f"[PLIK] {file_path.relative_to(working_dir)} {size_str}")
                
    def refresh_files(self):
        """Od≈õwie≈ºa listƒô plik√≥w - funkcja zastƒôpcza"""
        pass

    def load_intro_outro_files(self):
        """Automatycznie wczytuje pliki intro/outro z folderu intro_outro"""
        # Sprawd≈∫ r√≥≈ºne mo≈ºliwe lokalizacje plik√≥w intro/outro
        possible_paths = []
        
        # 1. Je≈õli uruchomione z kodu ≈∫r√≥d≈Çowego
        if hasattr(sys, '_MEIPASS'):
            # Uruchomione z .exe (PyInstaller)
            base_path = Path(sys._MEIPASS)
        else:
            # Uruchomione z kodu ≈∫r√≥d≈Çowego
            base_path = Path(__file__).parent.parent
        
        # Dodaj mo≈ºliwe ≈õcie≈ºki
        possible_paths.append(base_path / "intro_outro")
        possible_paths.append(Path.cwd() / "intro_outro")
        possible_paths.append(Path.cwd() / "dist" / "intro_outro")
        
        intro_outro_dir = None
        for path in possible_paths:
            if path.exists():
                intro_outro_dir = path
                break
        
        if intro_outro_dir and intro_outro_dir.exists():
            intro_video_path = None
            outro_video_path = None
            
            for file in intro_outro_dir.iterdir():
                if file.suffix.lower() in ['.mp4', '.avi', '.mov', '.mkv']:
                    file_name_lower = file.name.lower()
                    if 'intro' in file_name_lower:
                        intro_video_path = file
                    elif 'outro' in file_name_lower:
                        outro_video_path = file
            
            if intro_video_path:
                self.intro_video_path.set(str(intro_video_path))
                self.log(f"Wczytano intro video: {intro_video_path.name}")
            else:
                self.intro_video_path.set("")
                self.log("Nie znaleziono pliku intro w folderze intro_outro")
                
            if outro_video_path:
                self.outro_video_path.set(str(outro_video_path))
                self.log(f"Wczytano outro video: {outro_video_path.name}")
            else:
                self.outro_video_path.set("")
                self.log("Nie znaleziono pliku outro w folderze intro_outro")
        else:
            self.intro_video_path.set("")
            self.outro_video_path.set("")
            self.log("Folder intro_outro nie istnieje. Nie mo≈ºna wczytaƒá plik√≥w intro/outro.")
            self.log("Sprawd≈∫ czy folder intro_outro znajduje siƒô w tym samym katalogu co aplikacja.")

    def on_closing(self):
        """Obs≈Çuguje zamkniƒôcie aplikacji"""
        if messagebox.askokcancel("Wyj≈õcie", "Czy na pewno chcesz wyj≈õƒá z aplikacji?"):
            self.root.destroy()
            # Czekaj na zako≈Ñczenie wszystkich wƒÖtk√≥w
            for thread in self.active_threads:
                if thread.is_alive():
                    thread.join(timeout=5) # Poczekaj na zako≈Ñczenie wƒÖtku
            sys.exit(0)

def main():
    root = tk.Tk()
    app = VideoTranslationApp(root)
    

    
    root.mainloop()

if __name__ == "__main__":
    main() 